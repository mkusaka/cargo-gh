name: Release

on:
  push:
    tags:
      - 'v*'       # SemVer tags (v1.0.0, v2.1.3, etc.)
      - '*.*.*'    # Direct version tags (1.0.0, 2.1.3, etc.)
    branches:
      - '**'       # All branches for continuous releases
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write  # For release creation and asset upload

jobs:
  # Determine release type and create tag if needed
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.get_tag.outputs.tag }}
      is_continuous: ${{ steps.get_tag.outputs.is_continuous }}
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
      
      - name: Determine release tag
        id: get_tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Tagged release
            TAG="${GITHUB_REF#refs/tags/}"
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
            echo "is_continuous=false" >> $GITHUB_OUTPUT
            echo "üì¶ Tagged release: ${TAG}"
          else
            # Continuous release - create dev tag
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
            TIMESTAMP=$(date -u +"%Y%m%d-%H%M%S")
            TAG="dev-${TIMESTAMP}-${SHORT_SHA}"
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
            echo "is_continuous=true" >> $GITHUB_OUTPUT
            echo "üöÄ Continuous release: ${TAG}"
          fi
      
      - name: Create continuous release tag
        if: steps.get_tag.outputs.is_continuous == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          
          # Create lightweight tag for this commit
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "${TAG}"
          git push origin "${TAG}"
          
          echo "‚úÖ Created continuous release tag: ${TAG}"

  # Linux builds
  release-linux:
    name: Release (Linux)
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build with cargo-ghdist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the tag from prepare-release
          TAG="${{ needs.prepare-release.outputs.release_tag }}"
          
          cargo ghdist \
            --tag "${TAG}" \
            --targets x86_64-unknown-linux-gnu,aarch64-unknown-linux-gnu \
            --repository ${{ github.repository }}

  # macOS builds
  release-macos:
    name: Release (macOS)
    needs: prepare-release
    runs-on: macos-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Build with cargo-ghdist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the tag from prepare-release
          TAG="${{ needs.prepare-release.outputs.release_tag }}"
          
          cargo ghdist \
            --tag "${TAG}" \
            --targets x86_64-apple-darwin,aarch64-apple-darwin \
            --repository ${{ github.repository }}

  # Windows builds
  release-windows:
    name: Release (Windows)
    needs: prepare-release
    runs-on: windows-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Build with cargo-ghdist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          # Use the tag from prepare-release
          TAG="${{ needs.prepare-release.outputs.release_tag }}"
          
          cargo ghdist \
            --tag "${TAG}" \
            --targets x86_64-pc-windows-msvc \
            --repository ${{ github.repository }}

  # Publish release (convert draft to published)
  publish-release:
    name: Publish Release
    needs: [prepare-release, release-linux, release-macos, release-windows]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Update release status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          TAG="${{ needs.prepare-release.outputs.release_tag }}"
          IS_CONTINUOUS="${{ needs.prepare-release.outputs.is_continuous }}"
          
          # Get release ID
          RELEASE_ID=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/tags/${TAG} \
            --jq '.id')
          
          if [ -n "$RELEASE_ID" ]; then
            if [ "$IS_CONTINUOUS" = "true" ]; then
              # Continuous release body
              {
                echo "## üöÄ Continuous Release"
                echo ""
                echo "**Commit:** \`${{ github.sha }}\`"
                echo "**Author:** ${{ github.actor }}"
                echo "**Branch:** ${{ github.ref_name }}"
                echo ""
                echo "### üìù Commit Message"
                echo "${COMMIT_MESSAGE}"
                echo ""
                echo "### ‚ö†Ô∏è Note"
                echo "This is an automated development build. Use for testing purposes only."
                echo "For stable releases, please use tagged versions."
                echo ""
                echo "### üì¶ Installation"
                echo "\`\`\`bash"
                echo "# Install with cargo-ghinstall"
                echo "cargo ghinstall ${{ github.repository }}@${TAG}"
                echo "\`\`\`"
                echo ""
                echo "### üîó Links"
                echo "- [Commit](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})"
              } > /tmp/release-body.md
              
              # Update as prerelease
              gh api \
                --method PATCH \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/releases/${RELEASE_ID} \
                -f draft=false \
                -f prerelease=true \
                -f name="Development Build: ${TAG}" \
                --field body=@/tmp/release-body.md
              
              echo "‚úÖ Published continuous release: ${TAG}"
            else
              # Tagged release - just publish without modifying
              gh api \
                --method PATCH \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/releases/${RELEASE_ID} \
                -f draft=false \
                -f prerelease=false
              
              echo "‚úÖ Published tagged release: ${TAG}"
            fi
          else
            echo "‚ö†Ô∏è Could not find release with tag: ${TAG}"
            exit 1
          fi

  # Test installation
  test-installation:
    name: Test Installation
    needs: [prepare-release, publish-release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
      - name: Install cargo-ghinstall
        run: |
          cargo install cargo-ghinstall
      
      - name: Test installation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ needs.prepare-release.outputs.release_tag }}"
          # Test installing to a temporary directory
          cargo ghinstall "${{ github.repository }}@${TAG}" \
            --install-dir /tmp/test-install \
            --bins
          
          # Test the installed binaries
          /tmp/test-install/cargo-ghinstall --version
          /tmp/test-install/cargo-ghdist --version

  # Cleanup old continuous releases
  cleanup-old-releases:
    name: Cleanup Old Releases
    needs: [prepare-release, publish-release]
    if: needs.prepare-release.outputs.is_continuous == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup old dev releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Cleaning up old dev releases..."
          
          # Keep only the last 5 dev releases
          RELEASES=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases \
            --jq '.[] | select(.tag_name | startswith("dev-")) | .id' \
            | tail -n +6)
          
          if [ -n "$RELEASES" ]; then
            echo "$RELEASES" | while read -r release_id; do
              echo "Deleting release ID: $release_id"
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                /repos/${{ github.repository }}/releases/${release_id}
            done
            echo "‚úÖ Cleanup completed"
          else
            echo "No old releases to clean up"
          fi

  # Success notification
  release-success:
    name: Release Success
    needs: [prepare-release, test-installation]
    runs-on: ubuntu-latest
    
    steps:
      - name: Release summary
        run: |
          TAG="${{ needs.prepare-release.outputs.release_tag }}"
          IS_CONTINUOUS="${{ needs.prepare-release.outputs.is_continuous }}"
          
          if [ "$IS_CONTINUOUS" = "true" ]; then
            echo "# üöÄ Continuous Release Completed"
            echo ""
            echo "**Release Tag:** ${TAG}"
            echo "**Commit:** ${{ github.sha }}"
            echo "**Branch:** ${{ github.ref_name }}"
          else
            echo "# üéâ Tagged Release Completed"
            echo ""
            echo "**Release Tag:** ${TAG}"
          fi
          
          echo ""
          echo "## Installation"
          echo "\`\`\`bash"
          echo "cargo ghinstall ${{ github.repository }}@${TAG}"
          echo "\`\`\`"
          echo ""
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${TAG}"